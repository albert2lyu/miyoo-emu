# Define compilation type
OSTYPE=miyoo
#OSTYPE=oda320
#OSTYPE=odgcw

PRGNAME     = race-miyoo

# define regarding OS, which compiler to use
TOOLCHAIN = /opt/miyoo
EXESUFFIX = .dge
CC  = $(TOOLCHAIN)/bin/arm-linux-gcc
CCP = $(TOOLCHAIN)/bin/arm-linux-g++
LD  = $(TOOLCHAIN)/bin/arm-linux-g++

# add SDL dependencies
SYSROOT     := $(shell $(CC) --print-sysroot)
SDL_LIB     = $(shell $(SYSROOT)/usr/bin/sdl-config --libs)
SDL_INCLUDE  := $(shell $(SYSROOT)/usr/bin/sdl-config --cflags)

# change compilation / linking flag options
F_OPTS = -fpermissive -fno-exceptions -fno-rtti
#CC_OPTS = -O2 -g $(F_OPTS)
CC_OPTS = -Ofast -fdata-sections -ffunction-sections -fno-PIC -DARM_ARCH -Wall -march=armv5te -mtune=arm926ej-s -O3 -DC_CORE -fpermissive $(F_OPTS)
CFLAGS = $(SDL_INCLUDE) -DZ80 -DTARGET_OD -D_MAX_PATH=2048 -DHOST_FPS=60 -DNOUNCRYPT $(CC_OPTS)
CXXFLAGS=$(CFLAGS) 
LDFLAGS     = $(SDL_LIB) $(CC_OPTS) -lSDL -lz
#F_OPTS = -falign-functions -falign-loops -falign-labels -falign-jumps \
	-ffast-math -fsingle-precision-constant -funsafe-math-optimizations \
	-fomit-frame-pointer -fno-builtin -fno-common \
	-fstrict-aliasing  -fexpensive-optimizations \
	-finline -finline-functions -fpeel-loops -fno-exceptions -fno-rtti -fpermissive

# Files to be compiled
SRCDIR    = ./emu ./opendingux .
VPATH     = $(SRCDIR)
SRC_C   = $(foreach dir, $(SRCDIR), $(wildcard $(dir)/*.c))
SRC_CP   = $(foreach dir, $(SRCDIR), $(wildcard $(dir)/*.cpp))
OBJ_C   = $(notdir $(patsubst %.c, %.o, $(SRC_C)))
OBJ_CP   = $(notdir $(patsubst %.cpp, %.o, $(SRC_CP)))
OBJS     = $(OBJ_C) $(OBJ_CP)

# Rules to make executable
$(PRGNAME)$(EXESUFFIX): $(OBJS)  
#	$(LD) $(CFLAGS) -o $(PRGNAME)$(EXESUFFIX) $^ $(LDFLAGS)
	 $(LD) $(LDFLAGS) -o $(PRGNAME)$(EXESUFFIX) $^

$(OBJ_C) : %.o : %.c
	$(CC) $(CFLAGS) -c -o $@ $<

$(OBJ_CP) : %.o : %.cpp
	$(CCP) $(CXXFLAGS) -c -o $@ $<

clean:
	rm -f $(PRGNAME)$(EXESUFFIX) *.o
